<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.dianwoda.test.bassy.db.dao.BaseCaseStepMapper">
  <resultMap id="BaseResultMap" type="com.dianwoda.test.bassy.db.entity.BaseCaseStep">
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="case_id" jdbcType="INTEGER" property="caseId" />
    <result column="step_id" jdbcType="BIGINT" property="stepId" />
    <result column="desc" jdbcType="VARCHAR" property="desc" />
    <result column="expect_db" jdbcType="VARCHAR" property="expectDb" />
    <result column="expect_ui" jdbcType="VARCHAR" property="expectUi" />
    <result column="expect_response" jdbcType="VARCHAR" property="expectResponse" />
    <result column="expect_other" jdbcType="VARCHAR" property="expectOther" />
    <result column="execute_status" jdbcType="TINYINT" property="executeStatus" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    id, case_id, step_id, `desc`, expect_db, expect_ui, expect_response, expect_other, 
    execute_status
  </sql>
  <select id="selectByExample" parameterType="com.dianwoda.test.bassy.db.entity.BaseCaseStepExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from base_case_step
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from base_case_step
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from base_case_step
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.dianwoda.test.bassy.db.entity.BaseCaseStepExample">
    delete from base_case_step
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.dianwoda.test.bassy.db.entity.BaseCaseStep">
    insert into base_case_step (id, case_id, step_id, 
      `desc`, expect_db, expect_ui, 
      expect_response, expect_other, execute_status
      )
    values (#{id,jdbcType=INTEGER}, #{caseId,jdbcType=INTEGER}, #{stepId,jdbcType=BIGINT}, 
      #{desc,jdbcType=VARCHAR}, #{expectDb,jdbcType=VARCHAR}, #{expectUi,jdbcType=VARCHAR}, 
      #{expectResponse,jdbcType=VARCHAR}, #{expectOther,jdbcType=VARCHAR}, #{executeStatus,jdbcType=TINYINT}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.dianwoda.test.bassy.db.entity.BaseCaseStep">
    insert into base_case_step
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="caseId != null">
        case_id,
      </if>
      <if test="stepId != null">
        step_id,
      </if>
      <if test="desc != null">
        `desc`,
      </if>
      <if test="expectDb != null">
        expect_db,
      </if>
      <if test="expectUi != null">
        expect_ui,
      </if>
      <if test="expectResponse != null">
        expect_response,
      </if>
      <if test="expectOther != null">
        expect_other,
      </if>
      <if test="executeStatus != null">
        execute_status,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=INTEGER},
      </if>
      <if test="caseId != null">
        #{caseId,jdbcType=INTEGER},
      </if>
      <if test="stepId != null">
        #{stepId,jdbcType=BIGINT},
      </if>
      <if test="desc != null">
        #{desc,jdbcType=VARCHAR},
      </if>
      <if test="expectDb != null">
        #{expectDb,jdbcType=VARCHAR},
      </if>
      <if test="expectUi != null">
        #{expectUi,jdbcType=VARCHAR},
      </if>
      <if test="expectResponse != null">
        #{expectResponse,jdbcType=VARCHAR},
      </if>
      <if test="expectOther != null">
        #{expectOther,jdbcType=VARCHAR},
      </if>
      <if test="executeStatus != null">
        #{executeStatus,jdbcType=TINYINT},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.dianwoda.test.bassy.db.entity.BaseCaseStepExample" resultType="java.lang.Long">
    select count(*) from base_case_step
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update base_case_step
    <set>
      <if test="record.id != null">
        id = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.caseId != null">
        case_id = #{record.caseId,jdbcType=INTEGER},
      </if>
      <if test="record.stepId != null">
        step_id = #{record.stepId,jdbcType=BIGINT},
      </if>
      <if test="record.desc != null">
        `desc` = #{record.desc,jdbcType=VARCHAR},
      </if>
      <if test="record.expectDb != null">
        expect_db = #{record.expectDb,jdbcType=VARCHAR},
      </if>
      <if test="record.expectUi != null">
        expect_ui = #{record.expectUi,jdbcType=VARCHAR},
      </if>
      <if test="record.expectResponse != null">
        expect_response = #{record.expectResponse,jdbcType=VARCHAR},
      </if>
      <if test="record.expectOther != null">
        expect_other = #{record.expectOther,jdbcType=VARCHAR},
      </if>
      <if test="record.executeStatus != null">
        execute_status = #{record.executeStatus,jdbcType=TINYINT},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update base_case_step
    set id = #{record.id,jdbcType=INTEGER},
      case_id = #{record.caseId,jdbcType=INTEGER},
      step_id = #{record.stepId,jdbcType=BIGINT},
      `desc` = #{record.desc,jdbcType=VARCHAR},
      expect_db = #{record.expectDb,jdbcType=VARCHAR},
      expect_ui = #{record.expectUi,jdbcType=VARCHAR},
      expect_response = #{record.expectResponse,jdbcType=VARCHAR},
      expect_other = #{record.expectOther,jdbcType=VARCHAR},
      execute_status = #{record.executeStatus,jdbcType=TINYINT}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.dianwoda.test.bassy.db.entity.BaseCaseStep">
    update base_case_step
    <set>
      <if test="caseId != null">
        case_id = #{caseId,jdbcType=INTEGER},
      </if>
      <if test="stepId != null">
        step_id = #{stepId,jdbcType=BIGINT},
      </if>
      <if test="desc != null">
        `desc` = #{desc,jdbcType=VARCHAR},
      </if>
      <if test="expectDb != null">
        expect_db = #{expectDb,jdbcType=VARCHAR},
      </if>
      <if test="expectUi != null">
        expect_ui = #{expectUi,jdbcType=VARCHAR},
      </if>
      <if test="expectResponse != null">
        expect_response = #{expectResponse,jdbcType=VARCHAR},
      </if>
      <if test="expectOther != null">
        expect_other = #{expectOther,jdbcType=VARCHAR},
      </if>
      <if test="executeStatus != null">
        execute_status = #{executeStatus,jdbcType=TINYINT},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.dianwoda.test.bassy.db.entity.BaseCaseStep">
    update base_case_step
    set case_id = #{caseId,jdbcType=INTEGER},
      step_id = #{stepId,jdbcType=BIGINT},
      `desc` = #{desc,jdbcType=VARCHAR},
      expect_db = #{expectDb,jdbcType=VARCHAR},
      expect_ui = #{expectUi,jdbcType=VARCHAR},
      expect_response = #{expectResponse,jdbcType=VARCHAR},
      expect_other = #{expectOther,jdbcType=VARCHAR},
      execute_status = #{executeStatus,jdbcType=TINYINT}
    where id = #{id,jdbcType=INTEGER}
  </update>
</mapper>