<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.dianwoda.test.bassy.db.dao.ProgramTaskMapper">
  <resultMap id="BaseResultMap" type="com.dianwoda.test.bassy.db.entity.ProgramTask">
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="program_id" jdbcType="INTEGER" property="programId" />
    <result column="program_process" jdbcType="VARCHAR" property="programProcess" />
    <result column="require_id" jdbcType="INTEGER" property="requireId" />
    <result column="require_relate" jdbcType="VARCHAR" property="requireRelate" />
    <result column="task_name" jdbcType="VARCHAR" property="taskName" />
    <result column="task_code" jdbcType="VARCHAR" property="taskCode" />
    <result column="start_tm" jdbcType="TIMESTAMP" property="startTm" />
    <result column="end_tm" jdbcType="TIMESTAMP" property="endTm" />
    <result column="actual_start_tm" jdbcType="TIMESTAMP" property="actualStartTm" />
    <result column="actual_end_tm" jdbcType="TIMESTAMP" property="actualEndTm" />
    <result column="close_tm" jdbcType="TIMESTAMP" property="closeTm" />
    <result column="pause_tm" jdbcType="TIMESTAMP" property="pauseTm" />
    <result column="tester" jdbcType="VARCHAR" property="tester" />
    <result column="with_tester" jdbcType="VARCHAR" property="withTester" />
    <result column="expect_hour" jdbcType="REAL" property="expectHour" />
    <result column="status" jdbcType="VARCHAR" property="status" />
    <result column="create_tm" jdbcType="TIMESTAMP" property="createTm" />
    <result column="modify_tm" jdbcType="TIMESTAMP" property="modifyTm" />
    <result column="creator" jdbcType="VARCHAR" property="creator" />
    <result column="modifier" jdbcType="VARCHAR" property="modifier" />
    <result column="zt_task_id" jdbcType="INTEGER" property="ztTaskId" />
    <result column="zt_project_id" jdbcType="INTEGER" property="ztProjectId" />
    <result column="percent" jdbcType="INTEGER" property="percent" />
    <result column="actual_hour" jdbcType="REAL" property="actualHour" />
    <result column="exclude_date" jdbcType="VARCHAR" property="excludeDate" />
    <result column="include_date" jdbcType="VARCHAR" property="includeDate" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    id, program_id, program_process, require_id, require_relate, task_name, task_code, 
    start_tm, end_tm, actual_start_tm, actual_end_tm, close_tm, pause_tm, tester, with_tester, 
    expect_hour, `status`, create_tm, modify_tm, creator, modifier, zt_task_id, zt_project_id, 
    `percent`, actual_hour, exclude_date, include_date
  </sql>
  <select id="selectByExample" parameterType="com.dianwoda.test.bassy.db.entity.ProgramTaskExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from program_task
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from program_task
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from program_task
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.dianwoda.test.bassy.db.entity.ProgramTaskExample">
    delete from program_task
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.dianwoda.test.bassy.db.entity.ProgramTask">
    insert into program_task (id, program_id, program_process, 
      require_id, require_relate, task_name, 
      task_code, start_tm, end_tm, 
      actual_start_tm, actual_end_tm, close_tm, 
      pause_tm, tester, with_tester, 
      expect_hour, `status`, create_tm, 
      modify_tm, creator, modifier, 
      zt_task_id, zt_project_id, `percent`, 
      actual_hour, exclude_date, include_date
      )
    values (#{id,jdbcType=INTEGER}, #{programId,jdbcType=INTEGER}, #{programProcess,jdbcType=VARCHAR}, 
      #{requireId,jdbcType=INTEGER}, #{requireRelate,jdbcType=VARCHAR}, #{taskName,jdbcType=VARCHAR}, 
      #{taskCode,jdbcType=VARCHAR}, #{startTm,jdbcType=TIMESTAMP}, #{endTm,jdbcType=TIMESTAMP}, 
      #{actualStartTm,jdbcType=TIMESTAMP}, #{actualEndTm,jdbcType=TIMESTAMP}, #{closeTm,jdbcType=TIMESTAMP}, 
      #{pauseTm,jdbcType=TIMESTAMP}, #{tester,jdbcType=VARCHAR}, #{withTester,jdbcType=VARCHAR}, 
      #{expectHour,jdbcType=REAL}, #{status,jdbcType=VARCHAR}, #{createTm,jdbcType=TIMESTAMP}, 
      #{modifyTm,jdbcType=TIMESTAMP}, #{creator,jdbcType=VARCHAR}, #{modifier,jdbcType=VARCHAR}, 
      #{ztTaskId,jdbcType=INTEGER}, #{ztProjectId,jdbcType=INTEGER}, #{percent,jdbcType=INTEGER}, 
      #{actualHour,jdbcType=REAL}, #{excludeDate,jdbcType=VARCHAR}, #{includeDate,jdbcType=VARCHAR}
      )
    <selectKey resultType="Integer" order="AFTER" keyProperty="id">
      SELECT LAST_INSERT_ID() AS id
    </selectKey>
  </insert>
  <insert id="insertSelective" parameterType="com.dianwoda.test.bassy.db.entity.ProgramTask">
    insert into program_task
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="programId != null">
        program_id,
      </if>
      <if test="programProcess != null">
        program_process,
      </if>
      <if test="requireId != null">
        require_id,
      </if>
      <if test="requireRelate != null">
        require_relate,
      </if>
      <if test="taskName != null">
        task_name,
      </if>
      <if test="taskCode != null">
        task_code,
      </if>
      <if test="startTm != null">
        start_tm,
      </if>
      <if test="endTm != null">
        end_tm,
      </if>
      <if test="actualStartTm != null">
        actual_start_tm,
      </if>
      <if test="actualEndTm != null">
        actual_end_tm,
      </if>
      <if test="closeTm != null">
        close_tm,
      </if>
      <if test="pauseTm != null">
        pause_tm,
      </if>
      <if test="tester != null">
        tester,
      </if>
      <if test="withTester != null">
        with_tester,
      </if>
      <if test="expectHour != null">
        expect_hour,
      </if>
      <if test="status != null">
        `status`,
      </if>
      <if test="createTm != null">
        create_tm,
      </if>
      <if test="modifyTm != null">
        modify_tm,
      </if>
      <if test="creator != null">
        creator,
      </if>
      <if test="modifier != null">
        modifier,
      </if>
      <if test="ztTaskId != null">
        zt_task_id,
      </if>
      <if test="ztProjectId != null">
        zt_project_id,
      </if>
      <if test="percent != null">
        `percent`,
      </if>
      <if test="actualHour != null">
        actual_hour,
      </if>
      <if test="excludeDate != null">
        exclude_date,
      </if>
      <if test="includeDate != null">
        include_date,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=INTEGER},
      </if>
      <if test="programId != null">
        #{programId,jdbcType=INTEGER},
      </if>
      <if test="programProcess != null">
        #{programProcess,jdbcType=VARCHAR},
      </if>
      <if test="requireId != null">
        #{requireId,jdbcType=INTEGER},
      </if>
      <if test="requireRelate != null">
        #{requireRelate,jdbcType=VARCHAR},
      </if>
      <if test="taskName != null">
        #{taskName,jdbcType=VARCHAR},
      </if>
      <if test="taskCode != null">
        #{taskCode,jdbcType=VARCHAR},
      </if>
      <if test="startTm != null">
        #{startTm,jdbcType=TIMESTAMP},
      </if>
      <if test="endTm != null">
        #{endTm,jdbcType=TIMESTAMP},
      </if>
      <if test="actualStartTm != null">
        #{actualStartTm,jdbcType=TIMESTAMP},
      </if>
      <if test="actualEndTm != null">
        #{actualEndTm,jdbcType=TIMESTAMP},
      </if>
      <if test="closeTm != null">
        #{closeTm,jdbcType=TIMESTAMP},
      </if>
      <if test="pauseTm != null">
        #{pauseTm,jdbcType=TIMESTAMP},
      </if>
      <if test="tester != null">
        #{tester,jdbcType=VARCHAR},
      </if>
      <if test="withTester != null">
        #{withTester,jdbcType=VARCHAR},
      </if>
      <if test="expectHour != null">
        #{expectHour,jdbcType=REAL},
      </if>
      <if test="status != null">
        #{status,jdbcType=VARCHAR},
      </if>
      <if test="createTm != null">
        #{createTm,jdbcType=TIMESTAMP},
      </if>
      <if test="modifyTm != null">
        #{modifyTm,jdbcType=TIMESTAMP},
      </if>
      <if test="creator != null">
        #{creator,jdbcType=VARCHAR},
      </if>
      <if test="modifier != null">
        #{modifier,jdbcType=VARCHAR},
      </if>
      <if test="ztTaskId != null">
        #{ztTaskId,jdbcType=INTEGER},
      </if>
      <if test="ztProjectId != null">
        #{ztProjectId,jdbcType=INTEGER},
      </if>
      <if test="percent != null">
        #{percent,jdbcType=INTEGER},
      </if>
      <if test="actualHour != null">
        #{actualHour,jdbcType=REAL},
      </if>
      <if test="excludeDate != null">
        #{excludeDate,jdbcType=VARCHAR},
      </if>
      <if test="includeDate != null">
        #{includeDate,jdbcType=VARCHAR},
      </if>
    </trim>
    <selectKey resultType="Integer" order="AFTER" keyProperty="id">
      SELECT LAST_INSERT_ID() AS id
    </selectKey>
  </insert>
  <select id="countByExample" parameterType="com.dianwoda.test.bassy.db.entity.ProgramTaskExample" resultType="java.lang.Long">
    select count(*) from program_task
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update program_task
    <set>
      <if test="record.id != null">
        id = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.programId != null">
        program_id = #{record.programId,jdbcType=INTEGER},
      </if>
      <if test="record.programProcess != null">
        program_process = #{record.programProcess,jdbcType=VARCHAR},
      </if>
      <if test="record.requireId != null">
        require_id = #{record.requireId,jdbcType=INTEGER},
      </if>
      <if test="record.requireRelate != null">
        require_relate = #{record.requireRelate,jdbcType=VARCHAR},
      </if>
      <if test="record.taskName != null">
        task_name = #{record.taskName,jdbcType=VARCHAR},
      </if>
      <if test="record.taskCode != null">
        task_code = #{record.taskCode,jdbcType=VARCHAR},
      </if>
      <if test="record.startTm != null">
        start_tm = #{record.startTm,jdbcType=TIMESTAMP},
      </if>
      <if test="record.endTm != null">
        end_tm = #{record.endTm,jdbcType=TIMESTAMP},
      </if>
      <if test="record.actualStartTm != null">
        actual_start_tm = #{record.actualStartTm,jdbcType=TIMESTAMP},
      </if>
      <if test="record.actualEndTm != null">
        actual_end_tm = #{record.actualEndTm,jdbcType=TIMESTAMP},
      </if>
      <if test="record.closeTm != null">
        close_tm = #{record.closeTm,jdbcType=TIMESTAMP},
      </if>
      <if test="record.pauseTm != null">
        pause_tm = #{record.pauseTm,jdbcType=TIMESTAMP},
      </if>
      <if test="record.tester != null">
        tester = #{record.tester,jdbcType=VARCHAR},
      </if>
      <if test="record.withTester != null">
        with_tester = #{record.withTester,jdbcType=VARCHAR},
      </if>
      <if test="record.expectHour != null">
        expect_hour = #{record.expectHour,jdbcType=REAL},
      </if>
      <if test="record.status != null">
        `status` = #{record.status,jdbcType=VARCHAR},
      </if>
      <if test="record.createTm != null">
        create_tm = #{record.createTm,jdbcType=TIMESTAMP},
      </if>
      <if test="record.modifyTm != null">
        modify_tm = #{record.modifyTm,jdbcType=TIMESTAMP},
      </if>
      <if test="record.creator != null">
        creator = #{record.creator,jdbcType=VARCHAR},
      </if>
      <if test="record.modifier != null">
        modifier = #{record.modifier,jdbcType=VARCHAR},
      </if>
      <if test="record.ztTaskId != null">
        zt_task_id = #{record.ztTaskId,jdbcType=INTEGER},
      </if>
      <if test="record.ztProjectId != null">
        zt_project_id = #{record.ztProjectId,jdbcType=INTEGER},
      </if>
      <if test="record.percent != null">
        `percent` = #{record.percent,jdbcType=INTEGER},
      </if>
      <if test="record.actualHour != null">
        actual_hour = #{record.actualHour,jdbcType=REAL},
      </if>
      <if test="record.excludeDate != null">
        exclude_date = #{record.excludeDate,jdbcType=VARCHAR},
      </if>
      <if test="record.includeDate != null">
        include_date = #{record.includeDate,jdbcType=VARCHAR},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update program_task
    set id = #{record.id,jdbcType=INTEGER},
      program_id = #{record.programId,jdbcType=INTEGER},
      program_process = #{record.programProcess,jdbcType=VARCHAR},
      require_id = #{record.requireId,jdbcType=INTEGER},
      require_relate = #{record.requireRelate,jdbcType=VARCHAR},
      task_name = #{record.taskName,jdbcType=VARCHAR},
      task_code = #{record.taskCode,jdbcType=VARCHAR},
      start_tm = #{record.startTm,jdbcType=TIMESTAMP},
      end_tm = #{record.endTm,jdbcType=TIMESTAMP},
      actual_start_tm = #{record.actualStartTm,jdbcType=TIMESTAMP},
      actual_end_tm = #{record.actualEndTm,jdbcType=TIMESTAMP},
      close_tm = #{record.closeTm,jdbcType=TIMESTAMP},
      pause_tm = #{record.pauseTm,jdbcType=TIMESTAMP},
      tester = #{record.tester,jdbcType=VARCHAR},
      with_tester = #{record.withTester,jdbcType=VARCHAR},
      expect_hour = #{record.expectHour,jdbcType=REAL},
      `status` = #{record.status,jdbcType=VARCHAR},
      create_tm = #{record.createTm,jdbcType=TIMESTAMP},
      modify_tm = #{record.modifyTm,jdbcType=TIMESTAMP},
      creator = #{record.creator,jdbcType=VARCHAR},
      modifier = #{record.modifier,jdbcType=VARCHAR},
      zt_task_id = #{record.ztTaskId,jdbcType=INTEGER},
      zt_project_id = #{record.ztProjectId,jdbcType=INTEGER},
      `percent` = #{record.percent,jdbcType=INTEGER},
      actual_hour = #{record.actualHour,jdbcType=REAL},
      exclude_date = #{record.excludeDate,jdbcType=VARCHAR},
      include_date = #{record.includeDate,jdbcType=VARCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.dianwoda.test.bassy.db.entity.ProgramTask">
    update program_task
    <set>
      <if test="programId != null">
        program_id = #{programId,jdbcType=INTEGER},
      </if>
      <if test="programProcess != null">
        program_process = #{programProcess,jdbcType=VARCHAR},
      </if>
      <if test="requireId != null">
        require_id = #{requireId,jdbcType=INTEGER},
      </if>
      <if test="requireRelate != null">
        require_relate = #{requireRelate,jdbcType=VARCHAR},
      </if>
      <if test="taskName != null">
        task_name = #{taskName,jdbcType=VARCHAR},
      </if>
      <if test="taskCode != null">
        task_code = #{taskCode,jdbcType=VARCHAR},
      </if>
      <if test="startTm != null">
        start_tm = #{startTm,jdbcType=TIMESTAMP},
      </if>
      <if test="endTm != null">
        end_tm = #{endTm,jdbcType=TIMESTAMP},
      </if>
      <if test="actualStartTm != null">
        actual_start_tm = #{actualStartTm,jdbcType=TIMESTAMP},
      </if>
      <if test="actualEndTm != null">
        actual_end_tm = #{actualEndTm,jdbcType=TIMESTAMP},
      </if>
      <if test="closeTm != null">
        close_tm = #{closeTm,jdbcType=TIMESTAMP},
      </if>
      <if test="pauseTm != null">
        pause_tm = #{pauseTm,jdbcType=TIMESTAMP},
      </if>
      <if test="tester != null">
        tester = #{tester,jdbcType=VARCHAR},
      </if>
      <if test="withTester != null">
        with_tester = #{withTester,jdbcType=VARCHAR},
      </if>
      <if test="expectHour != null">
        expect_hour = #{expectHour,jdbcType=REAL},
      </if>
      <if test="status != null">
        `status` = #{status,jdbcType=VARCHAR},
      </if>
      <if test="createTm != null">
        create_tm = #{createTm,jdbcType=TIMESTAMP},
      </if>
      <if test="modifyTm != null">
        modify_tm = #{modifyTm,jdbcType=TIMESTAMP},
      </if>
      <if test="creator != null">
        creator = #{creator,jdbcType=VARCHAR},
      </if>
      <if test="modifier != null">
        modifier = #{modifier,jdbcType=VARCHAR},
      </if>
      <if test="ztTaskId != null">
        zt_task_id = #{ztTaskId,jdbcType=INTEGER},
      </if>
      <if test="ztProjectId != null">
        zt_project_id = #{ztProjectId,jdbcType=INTEGER},
      </if>
      <if test="percent != null">
        `percent` = #{percent,jdbcType=INTEGER},
      </if>
      <if test="actualHour != null">
        actual_hour = #{actualHour,jdbcType=REAL},
      </if>
      <if test="excludeDate != null">
        exclude_date = #{excludeDate,jdbcType=VARCHAR},
      </if>
      <if test="includeDate != null">
        include_date = #{includeDate,jdbcType=VARCHAR},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.dianwoda.test.bassy.db.entity.ProgramTask">
    update program_task
    set program_id = #{programId,jdbcType=INTEGER},
      program_process = #{programProcess,jdbcType=VARCHAR},
      require_id = #{requireId,jdbcType=INTEGER},
      require_relate = #{requireRelate,jdbcType=VARCHAR},
      task_name = #{taskName,jdbcType=VARCHAR},
      task_code = #{taskCode,jdbcType=VARCHAR},
      start_tm = #{startTm,jdbcType=TIMESTAMP},
      end_tm = #{endTm,jdbcType=TIMESTAMP},
      actual_start_tm = #{actualStartTm,jdbcType=TIMESTAMP},
      actual_end_tm = #{actualEndTm,jdbcType=TIMESTAMP},
      close_tm = #{closeTm,jdbcType=TIMESTAMP},
      pause_tm = #{pauseTm,jdbcType=TIMESTAMP},
      tester = #{tester,jdbcType=VARCHAR},
      with_tester = #{withTester,jdbcType=VARCHAR},
      expect_hour = #{expectHour,jdbcType=REAL},
      `status` = #{status,jdbcType=VARCHAR},
      create_tm = #{createTm,jdbcType=TIMESTAMP},
      modify_tm = #{modifyTm,jdbcType=TIMESTAMP},
      creator = #{creator,jdbcType=VARCHAR},
      modifier = #{modifier,jdbcType=VARCHAR},
      zt_task_id = #{ztTaskId,jdbcType=INTEGER},
      zt_project_id = #{ztProjectId,jdbcType=INTEGER},
      `percent` = #{percent,jdbcType=INTEGER},
      actual_hour = #{actualHour,jdbcType=REAL},
      exclude_date = #{excludeDate,jdbcType=VARCHAR},
      include_date = #{includeDate,jdbcType=VARCHAR}
    where id = #{id,jdbcType=INTEGER}
  </update>
  <select id="getProgramReportTask" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    SELECT p.*
    FROM ((program_task AS p
    INNER JOIN (SELECT * FROM dictionary WHERE dict_group = 'TEST_TASK') AS d ON p.task_code = d.dict_code)
    INNER JOIN (SELECT * FROM dictionary WHERE dict_group = 'PROJECT_NODE') AS d2 ON p.program_process = d2.dict_code)
    WHERE program_id=#{programId,jdbcType=INTEGER} AND p.`status` NOT IN ('init','close')
    ORDER BY require_id ASC,d.`order` DESC,d2.`order` DESC
  </select>
</mapper>